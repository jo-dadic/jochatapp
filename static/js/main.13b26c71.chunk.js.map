{"version":3,"sources":["Components/SendMsg.js","Components/Messages.js","App.js","serviceWorker.js","index.js"],"names":["SendMsg","props","sendMsg","e","preventDefault","onSendMsg","state","text","setState","handleTextChange","target","value","className","onSubmit","this","type","onChange","placeholder","Component","Messages","message","member","currentMember","id","key","uuidv4","style","backgroundColor","clientData","color","username","messages","map","m","renderMessage","App","handleSendMsg","drone","publish","room","randomName","Math","floor","random","toString","window","Scaledrone","data","on","error","console","clientId","subscribe","push","adjectives","nouns","length","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"uOAEqBA,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,QAAU,SAACC,GACTA,EAAEC,iBACF,EAAKH,MAAMI,UAAU,EAAKC,MAAMC,MAChC,EAAKC,SAAS,CAAED,KAAM,MAXL,EAcnBE,iBAAmB,SAACN,GAClB,EAAKK,SAAS,CAAED,KAAMJ,EAAEO,OAAOC,SAZ/B,EAAKL,MAAQ,CACXC,KAAM,IAJS,E,qDAmBjB,OACE,yBAAKK,UAAU,SACb,0BAAMC,SAAUC,KAAKZ,SACnB,2BACEa,KAAK,OACLJ,MAAOG,KAAKR,MAAMC,KAClBS,SAAUF,KAAKL,iBACfQ,YAAY,4BAEd,2BAAOL,UAAU,SAASG,KAAK,SAASJ,MAAM,e,GA7BnBO,c,QCChBC,E,4KACLC,GAAS,IAEbC,EAAiBD,EAAjBC,OAAQd,EAASa,EAATb,KACRe,EAAkBR,KAAKb,MAAvBqB,cAIFV,EADgBS,EAAOE,KAAOD,EAAcC,GAChB,wBAA0B,UAE5D,OACE,wBAAIX,UAAWA,EAAWY,IAAKC,eAC7B,0BACEb,UAAU,SACVc,MAAO,CAAEC,gBAAiBN,EAAOO,WAAWC,SAE9C,6BACE,yBAAKjB,UAAU,YAAYS,EAAOO,WAAWE,UAC7C,yBAAKlB,UAAU,QAAQL,O,+BAMrB,IAAD,OACCwB,EAAajB,KAAKb,MAAlB8B,SACR,OACE,wBAAInB,UAAU,QAAQmB,EAASC,KAAI,SAACC,GAAD,OAAO,EAAKC,cAAcD,W,GA3B7Bf,aCEjBiB,E,kDACnB,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IAkCRmC,cAAgB,SAAChB,GACf,EAAKiB,MAAMC,QAAQ,CACjBC,KAAM,oBACNnB,aAnCF,EAAKd,MAAQ,CACXyB,SAAU,GACVV,OAAQ,CACNS,SAAUU,IACVX,MA+LC,IAAMY,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,MA1LzD,EAAKP,MAAQ,IAAIQ,OAAOC,WAAW,mBAAoB,CACrDC,KAAM,EAAKzC,MAAMe,SAGnB,EAAKgB,MAAMW,GAAG,QAAQ,SAACC,GACrB,GAAIA,EACF,OAAOC,QAAQD,MAAMA,GAEvB,IAAM5B,EAAM,eAAQ,EAAKf,MAAMe,QAC/BA,EAAOE,GAAK,EAAKc,MAAMc,SACvB,EAAK3C,SAAS,CAAEa,cAGL,EAAKgB,MAAMe,UAAU,qBAC7BJ,GAAG,QAAQ,SAACD,EAAM1B,GACrB,IAAMU,EAAW,EAAKzB,MAAMyB,SAC5BA,EAASsB,KAAK,CAAEhC,SAAQd,KAAMwC,IAC9B,EAAKvC,SAAS,CAAEuB,gBA7BD,E,qDA2CjB,OACE,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,UACb,kDAEF,kBAAC,EAAD,CACEmB,SAAUjB,KAAKR,MAAMyB,SACrBT,cAAeR,KAAKR,MAAMe,SAE5B,kBAAC,EAAD,CAAShB,UAAWS,KAAKsB,qB,GArDAlB,aA4DjC,SAASsB,IACP,IAAMc,EAAa,CACjB,SACA,SACA,SACA,QACA,SACA,QACA,MACA,OACA,SACA,MACA,WACA,QACA,QACA,OACA,SACA,SACA,UACA,WACA,OACA,UACA,QACA,YACA,OACA,YACA,SACA,OACA,OACA,UACA,SACA,QACA,OACA,OACA,YACA,OACA,SACA,UACA,QACA,MACA,MACA,QACA,QACA,QACA,YACA,YACA,MACA,YACA,WACA,OACA,QACA,QACA,OACA,WACA,WACA,OACA,QACA,QACA,SACA,WACA,SACA,WACA,UACA,SACA,SACA,YAEIC,EAAQ,CACZ,YACA,QACA,SACA,OACA,OACA,OACA,MACA,UACA,OACA,OACA,SACA,OACA,SACA,OACA,OACA,UACA,SACA,OACA,QACA,SACA,MACA,QACA,OACA,QACA,YACA,OACA,MACA,OACA,QACA,OACA,SACA,UACA,UACA,QACA,OACA,WACA,QACA,OACA,WACA,YACA,UACA,QACA,MACA,QACA,OACA,UACA,SACA,QACA,aACA,OACA,QACA,YACA,MACA,OACA,QACA,SACA,OACA,MACA,QACA,QACA,QACA,OACA,QACA,QAIF,OAFkBD,EAAWb,KAAKC,MAAMD,KAAKE,SAAWW,EAAWE,SACtDD,EAAMd,KAAKC,MAAMD,KAAKE,SAAWY,EAAMC,SC3LlCC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLC,QAAQD,MAAMA,EAAM7B,a","file":"static/js/main.13b26c71.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class SendMsg extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      text: \"\",\r\n    };\r\n  }\r\n\r\n  sendMsg = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSendMsg(this.state.text);\r\n    this.setState({ text: \"\" });\r\n  };\r\n\r\n  handleTextChange = (e) => {\r\n    this.setState({ text: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"input\">\r\n        <form onSubmit={this.sendMsg}>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.text}\r\n            onChange={this.handleTextChange}\r\n            placeholder=\"Type your message here.\"\r\n          />\r\n          <input className=\"button\" type=\"submit\" value=\"Send\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport default class Messages extends Component {\r\n  renderMessage(message) {\r\n    // for data\r\n    const { member, text } = message;\r\n    const { currentMember } = this.props;\r\n\r\n    // to manage className\r\n    const messageFromMe = member.id === currentMember.id;\r\n    const className = messageFromMe ? \"message currentMember\" : \"message\";\r\n\r\n    return (\r\n      <li className={className} key={uuidv4()}>\r\n        <span\r\n          className=\"avatar\"\r\n          style={{ backgroundColor: member.clientData.color }}\r\n        />\r\n        <div>\r\n          <div className=\"username\">{member.clientData.username}</div>\r\n          <div className=\"text\">{text}</div>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { messages } = this.props;\r\n    return (\r\n      <ul className=\"list\">{messages.map((m) => this.renderMessage(m))}</ul>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SendMsg from \"./Components/SendMsg\";\nimport Messages from \"./Components/Messages\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      messages: [],\n      member: {\n        username: randomName(),\n        color: randomColor(),\n      },\n    };\n\n    //-------------SCALEDRONE-------------//\n    this.drone = new window.Scaledrone(\"EIK3OoxER8S0X40t\", {\n      data: this.state.member,\n    });\n\n    this.drone.on(\"open\", (error) => {\n      if (error) {\n        return console.error(error);\n      }\n      const member = { ...this.state.member };\n      member.id = this.drone.clientId;\n      this.setState({ member });\n    });\n\n    const room = this.drone.subscribe(\"observable-josipa\");\n    room.on(\"data\", (data, member) => {\n      const messages = this.state.messages;\n      messages.push({ member, text: data });\n      this.setState({ messages });\n    });\n\n    //-------------SCALEDRONE end-------------//\n  }\n\n  handleSendMsg = (message) => {\n    this.drone.publish({\n      room: \"observable-josipa\",\n      message,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h1>Josipa's Chat App</h1>\n        </div>\n        <Messages\n          messages={this.state.messages}\n          currentMember={this.state.member}\n        />\n        <SendMsg onSendMsg={this.handleSendMsg} />\n      </div>\n    );\n  }\n}\n\n//------------FOR RANDOM NAME AND COLOR-------------//\nfunction randomName() {\n  const adjectives = [\n    \"autumn\",\n    \"hidden\",\n    \"bitter\",\n    \"misty\",\n    \"silent\",\n    \"empty\",\n    \"dry\",\n    \"dark\",\n    \"summer\",\n    \"icy\",\n    \"delicate\",\n    \"quiet\",\n    \"white\",\n    \"cool\",\n    \"spring\",\n    \"winter\",\n    \"patient\",\n    \"twilight\",\n    \"dawn\",\n    \"crimson\",\n    \"wispy\",\n    \"weathered\",\n    \"blue\",\n    \"billowing\",\n    \"broken\",\n    \"cold\",\n    \"damp\",\n    \"falling\",\n    \"frosty\",\n    \"green\",\n    \"long\",\n    \"late\",\n    \"lingering\",\n    \"bold\",\n    \"little\",\n    \"morning\",\n    \"muddy\",\n    \"old\",\n    \"red\",\n    \"rough\",\n    \"still\",\n    \"small\",\n    \"sparkling\",\n    \"throbbing\",\n    \"shy\",\n    \"wandering\",\n    \"withered\",\n    \"wild\",\n    \"black\",\n    \"young\",\n    \"holy\",\n    \"solitary\",\n    \"fragrant\",\n    \"aged\",\n    \"snowy\",\n    \"proud\",\n    \"floral\",\n    \"restless\",\n    \"divine\",\n    \"polished\",\n    \"ancient\",\n    \"purple\",\n    \"lively\",\n    \"nameless\",\n  ];\n  const nouns = [\n    \"waterfall\",\n    \"river\",\n    \"breeze\",\n    \"moon\",\n    \"rain\",\n    \"wind\",\n    \"sea\",\n    \"morning\",\n    \"snow\",\n    \"lake\",\n    \"sunset\",\n    \"pine\",\n    \"shadow\",\n    \"leaf\",\n    \"dawn\",\n    \"glitter\",\n    \"forest\",\n    \"hill\",\n    \"cloud\",\n    \"meadow\",\n    \"sun\",\n    \"glade\",\n    \"bird\",\n    \"brook\",\n    \"butterfly\",\n    \"bush\",\n    \"dew\",\n    \"dust\",\n    \"field\",\n    \"fire\",\n    \"flower\",\n    \"firefly\",\n    \"feather\",\n    \"grass\",\n    \"haze\",\n    \"mountain\",\n    \"night\",\n    \"pond\",\n    \"darkness\",\n    \"snowflake\",\n    \"silence\",\n    \"sound\",\n    \"sky\",\n    \"shape\",\n    \"surf\",\n    \"thunder\",\n    \"violet\",\n    \"water\",\n    \"wildflower\",\n    \"wave\",\n    \"water\",\n    \"resonance\",\n    \"sun\",\n    \"wood\",\n    \"dream\",\n    \"cherry\",\n    \"tree\",\n    \"fog\",\n    \"frost\",\n    \"voice\",\n    \"paper\",\n    \"frog\",\n    \"smoke\",\n    \"star\",\n  ];\n  const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n  const noun = nouns[Math.floor(Math.random() * nouns.length)];\n  return adjective + noun;\n}\n\nfunction randomColor() {\n  return \"#\" + Math.floor(Math.random() * 0xffffff).toString(16);\n}\n//------------FOR RANDOM NAME AND COLOR end-------------//\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}